#include<stdio.h>
#include<stdlib.h>

typedef struct tree
{  
int data;
struct tree *left,*right;
int ht;
}tree;


tree *insert(tree *,int);
tree *delete(tree *,int);
void  preorder(tree *);
void  inorder(tree *);
int   height( tree *);
tree *rotateright(tree *);
tree *rotateleft(tree *);
tree *RR(tree *);
tree *LL(tree *);
tree *LR(tree *);
tree *RL(tree *);
int diff(tree *);

void main()
{
   tree *root=NULL;
   int x,n,i,op;
do{
        printf("\n1)Create:");
        printf("\n2)Insert:");
        printf("\n3)Delete:");
        printf("\n4)Display:");
        printf("\n5)Quit:");
        printf("\n\nEnter Your Choice:");
        scanf("%d",&op);
        switch(op)
      {
           case 1:printf("\nEnter no. of elements:");
           scanf("%d",&n);
           printf("\nEnter tree data:");
           root=NULL;
           for(i=0;i<n;i++)
             {
                    scanf("%d",&x);
                    root=insert(root,x);
             }
           break;
          case 2:printf("\nEnter a data:");
          scanf("%d",&x);
          root=insert(root,x);
          break;
          case 3:printf("\nEnter a data:");
          scanf("%d",&x);
          root=delete(root,x);
          break;
          case 4:  printf("\nPreorder sequence:\n");
          preorder(root);
          printf("\n\nInorder sequence:\n");
          inorder(root);
          printf("\n");
          break;
      }
 }while(op!=5);

}
tree * insert(tree *T,int x)
{
   if(T==NULL)
               {
                      T=(tree*)malloc(sizeof(tree));
                      T->data=x;
                      T->left=NULL;
                      T->right=NULL;
               }
               else
                     if(x > T->data)   
                      {
                          T->right=insert(T->right,x);
                          if(diff(T)==-2)
                                 if(x>T->right->data)
                                          T=RR(T);
                                 else
                                          T=RL(T);
                      }
                     else
                          if(x<T->data)
                            {
                                T->left=insert(T->left,x);
                                   if(diff(T)==2)
                                          if(x < T->left->data)
                                                 T=LL(T);
                                          else
                                                 T=LR(T);
                            }
                                T->ht=height(T);
                                   return(T);
}

tree * delete(tree *T,int x)
{       tree *p;

   if(T==NULL)
    {
       return NULL;
    }
  else

       if(x > T->data) 
      {
           T->right=delete(T->right,x);
                if(diff(T)==2)
                   if(diff(T->left)>=0)
                         T=LL(T);
                   else
                         T=LR(T);
      }
       else
           if(x<T->data)
           {
            T->left=delete(T->left,x);
               if(diff(T)==-2)
                  if(diff(T->right)<=0)
                      T=RR(T);
                  else
                      T=RL(T);
           }
           else
           {
            if(T->right !=NULL)
            {  
              p=T->right;
              while(p->left != NULL)
              p=p->left;
              T->data=p->data;
              T->right=delete(T->right,p->data);
                  if(diff(T)==2)
                     if(diff(T->left)>=0)
                             T=LL(T);
                     else
                             T=LR(T);
             }
             else
                return(T->left);

           }
               T->ht=height(T);
               return(T);
}

int height(tree *T)
{
               int lh,rh;
               if(T==NULL)
                     return(0);
                   if(T->left==NULL)
                              lh=0;
                   else
                              lh=1+T->left->ht;
                   if(T->right==NULL)
                              rh=0;
                   else
                              rh=1+T->right->ht;
                 if(lh>rh)
                        return(lh);
                 else
                        return(rh);
}
tree * rotateright(tree *x)
{
               tree *y;
               y=x->left;
               x->left=y->right;
               y->right=x;
               x->ht=height(x);
               y->ht=height(y);
               return(y);
}
tree * rotateleft(tree *x)
{
               tree *y;
               y=x->right;
               x->right=y->left;
               y->left=x;
               x->ht=height(x);
               y->ht=height(y);
               return(y);
}
tree * RR(tree *T)
{
               T=rotateleft(T);
               return(T);
}
tree * LL(tree *T)
{
               T=rotateright(T);
               return(T);
}
tree * LR(tree *T)
{
               T->left=rotateleft(T->left);
               T=rotateright(T);
               return(T);
}
tree * RL(tree *T)
{
               T->right=rotateright(T->right);
               T=rotateleft(T);
               return(T);
}
int diff(tree *T)
{
               int lh,rh;
               if(T==NULL)
               return(0);
               if(T->left==NULL)
                              lh=0;
               else
                              lh=1+T->left->ht;
               if(T->right==NULL)
                              rh=0;
               else
                              rh=1+T->right->ht;
               return(lh-rh);
}
void preorder(tree *T)
{
               if(T!=NULL)
               {
                              printf("%d(diff=%d) ",T->data,diff(T));
                              preorder(T->left);
                              preorder(T->right);
               }
}
void inorder(tree *T)
{
               if(T!=NULL)
               {
                              inorder(T->left);
                              printf("%d(diff=%d) ",T->data,diff(T));
                              inorder(T->right);
               }

}
